name: Build and Release on Tag Push

on:
  push:
    tags:
      - 'v*'  # 匹配以 'v' 开头的版本号标签，如 v1.0.0

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }}

      - name: Create GitHub Release
        if: ${{ matrix.os == 'ubuntu-latest' }} # 只在一次运行中发布 Release，避免多次发布
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }} # 使用当前的 tag
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Build Artifacts
        uses: actions/upload-release-asset@v1
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ steps.strings.outputs.build-output-dir }}/<your_artifact_name>
          asset_name: <your_artifact_name>
          asset_content_type: application/octet-stream
